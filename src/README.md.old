# Vision Browser
A minimal web browser. Created using Electron.

**In its current state, Vision is very basic and full of bugs & glitches. I *DON'T* suggest using this browser for any serious use.** That being said, if you *do* decide to use it, Vision is currently much more suitable as a single-purpose utility as it does not currently support multiple tabs (and will probably not until a viable solution is found, without being too inefficient). An example of using Vision as a single-purpose utility would be for something like digital signage.

## Project Information
You can visit Vision's website [here](https://vision.saturdaynightdead.xyz). We're also looking for developers and testers, you can click [on this](https://vision.saturdaynightdead.xyz/future-testers-developers) to find out more!

## Version numbers
Each release of Vision uses *two* version identifiers/numbers.

### Year-Month-Revision Version Number/ID (Y-M-R)
Example: 20.02.01

Format: yy.mm.vr

*yy represents the two-digit, mm represents the two-digit month, and vr represents the version revision (more digits can be added for this one!)*

**This version number format is the de-facto format, meaning that version numbers will normally be presented in this way (with a few exceptions).**

### Semantic Version Number/ID (semV; README may also reference semantic versions under the name "API" or "APIv*x*")
Example: 1.0.0

*Learn more about semantic versioning [here](https://semver.org/).*

**This version number format is usually only used in places like package.json, as well as places where only semantic versioning is recognized.**

### How would version numbers be presented in package.json?
For versions of Vision beyond v20.02.02/semV1.0.0.2, the package.json versions are presented using the semantic version number, instead of the Y-M-R version number. 

*However*, for versions v20.02.01/semV1.0.0 and v20.02.02, the package.json versions are presented using the *Y-M-R* version number, followed by the *semantic* ___major___ version number. For example, v20.02.02's package.json version is ``v20.02.02 (base v1)``.

## Why are all base v1.x releases listed as "pre-release"?
Base v1 is very minimal and unstable. It uses the Electron ``webview`` tag, which is based on Chromium's ``webview``. As the latter is undergoing large architectural changes, many bugs are present with it. Thus, I have deemed base v1.x releases as *unstable and not meant for production use*.

## What about APIv2?
Vision APIv2 is currently under development. I'm working on rebuilding the back-bone of Vision from the ground up, using the much stable BrowserView engine instead of the Chromium-provided ``webview`` engine. A redesign is also planned, but this may change in the future.

### Why use BrowserView instead of ``webview``?
Electron's implementation of ``webview`` is derived from Chromium's implementation of the tag/engine. Currently, it is undergoing ***massive*** structural changes and is very much unstable.

Electron's team has implemented an alternative to the ``webview`` engine/tag, named BrowserView. It is very much more stable and faster in terms of performance because it uses the core Electron process as opposed to ``webview``, which uses the renderer process. Additionally, it allows the webpage to be in a fixed position that overlays any other element of the page [including window elements], making it drastically easier to frame webpage content.

Previously, Vision has been unable to utilize the BrowserView engine because I was previously unable to use Electron remotes. Now that I am able to use remotes, BrowserView-rendered webpages are now possible. Also, ``webview`` has many program-breaking issues (see [this](https://github.com/electron/electron/issues/8505) and [this](https://github.com/electron/electron/issues/6139)) and BrowserView completely eliminates these issues.  

### I utilize registry values and/or GPOs (or local group policies). Will APIv2 include support for these?
This is *not* currently planned. This may come at some point *after* v2.
